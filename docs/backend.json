{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the CodeTube application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "githubUsername": {
          "type": "string",
          "description": "GitHub username of the user."
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "Course": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Course",
      "type": "object",
      "description": "Represents a course created or imported by the user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the course."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Course)"
        },
        "title": {
          "type": "string",
          "description": "Title of the course."
        },
        "description": {
          "type": "string",
          "description": "Description of the course."
        },
        "youTubeLink": {
          "type": "string",
          "description": "Link to the YouTube video from which the course is based."
        },
        "published": {
            "type": "boolean",
            "description": "Whether the course is publicly visible."
        }
      },
      "required": [
        "id",
        "userId",
        "title"
      ]
    },
    "Chapter": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Chapter",
      "type": "object",
      "description": "Represents a chapter within a course.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the chapter."
        },
        "courseId": {
          "type": "string",
          "description": "Reference to Course. (Relationship: Course 1:N Chapter)"
        },
        "title": {
          "type": "string",
          "description": "Title of the chapter."
        },
        "startTime": {
          "type": "number",
          "description": "Start time of the chapter in the YouTube video (in seconds)."
        },
        "note": {
          "type": "string",
          "description": "Note for the chapter, potentially generated by AI."
        },
        "code": {
          "type": "string",
          "description": "Optional code snippet associated with the chapter."
        }
      },
      "required": [
        "id",
        "courseId",
        "title",
        "startTime"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/courses/{courseId}",
        "definition": {
          "entityName": "Course",
          "schema": {
            "$ref": "#/backend/entities/Course"
          },
          "description": "Stores the private, editable copy of a user's course.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "courseId",
              "description": "The unique identifier of the course."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/courses/{courseId}/chapters/{chapterId}",
        "definition": {
          "entityName": "Chapter",
          "schema": {
            "$ref": "#/backend/entities/Chapter"
          },
          "description": "Stores chapters within a course.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "courseId",
              "description": "The unique identifier of the course."
            },
            {
              "name": "chapterId",
              "description": "The unique identifier of the chapter."
            }
          ]
        }
      },
      {
        "path": "/courses/{courseId}",
        "definition": {
          "entityName": "Course",
          "schema": {
            "$ref": "#/backend/entities/Course"
          },
          "description": "Stores the public, read-only version of a course. Anyone can read if published:true.",
          "params": [
            {
              "name": "courseId",
              "description": "The unique identifier of the course."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence, support QAPs, and maintain data integrity. It leverages path-based ownership for user-specific data and avoids `get()` calls in security rules by denormalizing authorization context where necessary.\n\n*   **Users Collection:** Stores user profiles.\n*   **Private Courses Collection:** Courses are stored as subcollections under each user's document (`/users/{userId}/courses/{courseId}`). This is the private, editable version of the course. This structure reflects the 1:N relationship between users and courses and simplifies ownership-based security rules.\n*   **Chapters Collection:** Chapters are stored as subcollections under each private course (`/users/{userId}/courses/{courseId}/chapters/{chapterId}`), maintaining the content hierarchy.\n*   **Public Courses Collection:** A top-level `/courses/{courseId}` collection stores a denormalized, public-facing copy of a course. This copy is only created or updated when a course is published. Security rules allow public read access only to documents in this collection where `published == true`. This separation of private and public data is a scalable pattern for handling public content while keeping user data secure."
  }
}