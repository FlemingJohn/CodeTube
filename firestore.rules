/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private course data and allows public read access to published courses.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/courses/{courseId}: Stores private course data, accessible only to the course owner.
 * - /users/{userId}/courses/{courseId}/chapters/{chapterId}: Stores chapter data for private courses, accessible only to the course owner.
 * - /courses/{courseId}: Stores public, read-only course data, accessible to all users if the 'published' field is true.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Courses and chapters under /users/{userId} are strictly owned and managed by that user.
 * - Public courses in /courses/{courseId} are readable by anyone if the published flag is true, but only updatable/deletable by the owner.
 * - Listing of any kind is only allowed for the owner of a course.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user123' cannot create a profile for user 'user456'.
     * @deny (get) User with ID 'user123' cannot read profile of user 'user456'.
     * @deny (update) User with ID 'user123' cannot update profile of user 'user456'.
     * @deny (delete) User with ID 'user123' cannot delete profile of user 'user456'.
     * @principle Enforces user-ownership for user profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to private course documents under a user.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) User with ID 'user123' can create a course under their profile.
     * @allow (get) User with ID 'user123' can read a course under their profile.
     * @allow (update) User with ID 'user123' can update a course under their profile.
     * @allow (delete) User with ID 'user123' can delete a course under their profile.
     * @deny (create) User with ID 'user123' cannot create a course under user 'user456'.
     * @deny (get) User with ID 'user123' cannot read a course under user 'user456'.
     * @deny (update) User with ID 'user123' cannot update a course under user 'user456'.
     * @deny (delete) User with ID 'user123' cannot delete a course under user 'user456'.
     * @principle Enforces user-ownership for private course data.
     */
    match /users/{userId}/courses/{courseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to chapter documents under a private course.
     * @path /users/{userId}/courses/{courseId}/chapters/{chapterId}
     * @allow (create) User with ID 'user123' can create a chapter under their course.
     * @allow (get) User with ID 'user123' can read a chapter under their course.
     * @allow (update) User with ID 'user123' can update a chapter under their course.
     * @allow (delete) User with ID 'user123' can delete a chapter under their course.
     * @deny (create) User with ID 'user123' cannot create a chapter under course of user 'user456'.
     * @deny (get) User with ID 'user123' cannot read a chapter under course of user 'user456'.
     * @deny (update) User with ID 'user123' cannot update a chapter under course of user 'user456'.
     * @deny (delete) User with ID 'user123' cannot delete a chapter under course of user 'user456'.
     * @principle Enforces user-ownership for chapter data within private courses.
     */
    match /users/{userId}/courses/{courseId}/chapters/{chapterId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to public course documents.
     * @path /courses/{courseId}
     * @allow (get) Any user can read a course if it's published.
     * @allow (list) Any user can list courses if they are published.
     * @allow (create) User with ID 'user123' can create a public course where userId matches.
     * @allow (update) User with ID 'user123' can update a public course they own.
     * @allow (delete) User with ID 'user123' can delete a public course they own.
     * @deny (create) User with ID 'user123' cannot create a public course with mismatched userId.
     * @deny (update) User with ID 'user123' cannot update a public course they don't own.
     * @deny (delete) User with ID 'user123' cannot delete a public course they don't own.
     * @principle Allows public read access to published courses while enforcing owner-only writes.
     */
    match /courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
  }
}