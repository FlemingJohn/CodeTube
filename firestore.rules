/**
 * @file Firebase Security Rules for CodeTube
 *
 * @core_philosophy
 * This ruleset enforces a strict user-ownership model for private course data while allowing public read access to published courses.
 * User-specific data (profiles, courses, chapters) is secured using path-based authorization.
 *
 * @data_structure
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /users/{userId}/courses/{courseId}: Stores private, editable courses owned by the user.
 * - /users/{userId}/courses/{courseId}/chapters/{chapterId}: Stores chapters within a private course.
 * - /courses/{courseId}: Stores public, read-only courses. Anyone can read if `published` is true.
 *
 * @key_security_decisions
 * - User listing is explicitly denied.
 * - Public course data is separated from private course data into two different collections, with a `published` flag.
 * - Data validation is limited to authorization-critical fields to enable rapid prototyping.
 * - Course documents in the `/courses` collection MUST contain the `userId` of the owning user to determine edit access.
 *
 * @denormalization_for_authorization
 * - Public courses in the `/courses/{courseId}` collection must contain a `userId` field, copied from the private course, to allow for owner-based write restrictions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @allow (get) User with ID 'user123' can get their profile.
     * @deny (get) User with ID 'user456' cannot get the profile with ID 'user123'.
     * @allow (update) User with ID 'user123' can update their profile.
     * @deny (update) User with ID 'user456' cannot update the profile with ID 'user123'.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (delete) User with ID 'user456' cannot delete the profile with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to private courses owned by a user.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) User 'user123' can create a course under their ID.
     * @deny (create) User 'user456' cannot create a course under user 'user123'.
     * @allow (get) User 'user123' can read their own course.
     * @deny (get) User 'user456' cannot read course owned by user 'user123'.
     * @allow (update) User 'user123' can update their own course.
     * @deny (update) User 'user456' cannot update course owned by user 'user123'.
     * @allow (delete) User 'user123' can delete their own course.
     * @deny (delete) User 'user456' cannot delete course owned by user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/courses/{courseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to chapters within a user's course.
     * @path /users/{userId}/courses/{courseId}/chapters/{chapterId}
     * @allow (create) User 'user123' can create a chapter in their course.
     * @deny (create) User 'user456' cannot create a chapter in course owned by user 'user123'.
     * @allow (get) User 'user123' can read their own chapter.
     * @deny (get) User 'user456' cannot read a chapter in course owned by user 'user123'.
     * @allow (update) User 'user123' can update their own chapter.
     * @deny (update) User 'user456' cannot update a chapter in course owned by user 'user123'.
     * @allow (delete) User 'user123' can delete their own chapter.
     * @deny (delete) User 'user456' cannot delete a chapter in course owned by user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/courses/{courseId}/chapters/{chapterId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to public courses.
     * @path /courses/{courseId}
     * @allow (get) Anyone can read a public course if published == true.
     * @deny (get) User 'user456' cannot read a public course if published == false.
     * @allow (create) User 'user123' can create public course that contain userId.
     * @deny (create) User 'user456' cannot create public course that contain userId.
     * @allow (update) User 'user123' can update public course where resource.data.userId == request.auth.uid.
     * @deny (update) User 'user456' cannot update public course where resource.data.userId == request.auth.uid.
     * @allow (delete) User 'user123' can delete public course where resource.data.userId == request.auth.uid.
     * @deny (delete) User 'user456' cannot delete public course where resource.data.userId == request.auth.uid.
     * @principle Allows public read access for published courses and enforces ownership for writes.
     */
    match /courses/{courseId} {
      allow get: if true; // Public read access.
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
  }
}