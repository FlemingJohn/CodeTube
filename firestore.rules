/**
 * @fileoverview Firestore Security Rules for CodeTube.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private course data while allowing public read access to published courses.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/courses/{courseId}: Stores private course data, accessible only to the course owner.
 * - /users/{userId}/courses/{courseId}/chapters/{chapterId}: Stores chapter data, accessible only to the course owner.
 * - /courses/{courseId}: Stores public course data (denormalized copy), publicly readable if 'published' is true.
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Users can only access courses and chapters they own (private collections).
 * - Public courses are readable by anyone if the 'published' field is true.
 * - Listing of user documents is disallowed to prevent enumeration.
 *
 * Denormalization for Authorization:
 * - The 'Course' entity contains a 'userId' field to quickly check ownership in the private courses collection.
 *
 * Structural Segregation:
 * - Private course data is stored under /users/{userId}/courses/{courseId}, while public course data is stored in the top-level /courses/{courseId} collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Controls access to user profile documents.
     * @path: /users/{userId}
     * @allow: User (create) Creates their own user document.
     * @allow: User (get) Reads their own user document.
     * @deny: Other user (get) Reads another user's document.
     * @deny: User (list) Cannot list user documents.
     * @deny: Other user (create, update, delete) Cannot modify other user's document.
     * @principle: Enforces user-ownership: users can only manage their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description: Controls access to courses under a user's profile.
     * @path: /users/{userId}/courses/{courseId}
     * @allow: User (create) Creates a course under their own profile.
     * @allow: User (get) Reads a course under their own profile.
     * @allow: User (list) Lists courses under their own profile.
     * @allow: User (update) Updates a course under their own profile.
     * @allow: User (delete) Deletes a course under their own profile.
     * @deny: Other user (create, get, list, update, delete) Cannot access other user's courses.
     * @principle: Enforces user-ownership: users can only manage courses under their profile.
     */
    match /users/{userId}/courses/{courseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description: Controls access to chapters under a course.
     * @path: /users/{userId}/courses/{courseId}/chapters/{chapterId}
     * @allow: User (create) Creates a chapter within their own course.
     * @allow: User (get) Reads a chapter within their own course.
     * @allow: User (list) Lists chapters within their own course.
     * @allow: User (update) Updates a chapter within their own course.
     * @allow: User (delete) Deletes a chapter within their own course.
     * @deny: Other user (create, get, list, update, delete) Cannot access other user's chapters.
     * @principle: Enforces user-ownership: users can only manage chapters within their own courses.
     */
    match /users/{userId}/courses/{courseId}/chapters/{chapterId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description: Controls access to publicly available courses.
     * @path: /courses/{courseId}
     * @allow: Any user (get, list) Can read/list public courses.
     *
     * @deny: Any user (create, update, delete) Public courses cannot be managed through this endpoint.
     * @principle: Allows public read access to courses if published.
     */
    match /courses/{courseId} {
        allow get, list: if true;
        allow create: if request.resource.data.userId == request.auth.uid;
        allow update: if resource.data.userId == request.auth.uid && resource != null;
        allow delete: if resource.data.userId == request.auth.uid && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}