/**
 * @fileOverview Firestore Security Rules for CodeTube.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data (profiles, courses, chapters).
 * Public courses are readable by anyone if the 'published' field is set to true, but only the owner can modify them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible only by the user themselves.
 * - /users/{userId}/courses/{courseId}: Stores private, editable versions of courses owned by the user.
 * - /users/{userId}/courses/{courseId}/chapters/{chapterId}: Stores chapters within a private course.
 * - /courses/{courseId}: Stores public, read-only versions of courses. Readable by anyone if published:true.
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Courses and chapters under /users/{userId} are accessible only by the owning user.
 * - Public courses in /courses/{courseId} are readable by anyone if 'published' is true, but only the owner can modify them.
 * - The `list` operation is allowed for user-owned courses and chapters.
 *
 * Denormalization for Authorization:
 * - Courses in the top-level `/courses/{courseId}` collection MUST have a `userId` field to indicate ownership. This is essential for securing write access.
 *   It will be validated upon course creation in that collection.
 *
 * Structural Segregation:
 * - Private and public courses are stored in separate collections (/users/{userId}/courses/{courseId} vs /courses/{courseId}) to simplify access control and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - User with matching {userId}.
     * @deny (get, create, update, delete) - User with non-matching {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to courses owned by a specific user.
     * @path /users/{userId}/courses/{courseId}
     * @allow (get, create, update, delete, list) - User with matching {userId}.
     * @deny (get, create, update, delete, list) - User with non-matching {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/courses/{courseId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to chapters within a specific user's course.
     * @path /users/{userId}/courses/{courseId}/chapters/{chapterId}
     * @allow (get, create, update, delete, list) - User with matching {userId}.
     * @deny (get, create, update, delete, list) - User with non-matching {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/courses/{courseId}/chapters/{chapterId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants read access to public courses, but restricts write access to the owner.
     * @path /courses/{courseId}
     * @allow (get, list) - Anyone if published == true.
     * @allow (create) - Owner with matching userId in request.resource.data.
     * @allow (update, delete) - Owner with matching userId in resource.data.
     * @deny (create, update, delete) - If not owner.
     * @principle Allows public read access to published courses while enforcing ownership for writes.
     */
    match /courses/{courseId} {
      function isOwner(resourceUserId) {
        return request.auth.uid == resourceUserId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
  }
}