/**
 * @file Firestore Security Rules for CodeTube.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model.  Users can only
 *   read and write their own data. Data is nested under /users/{userId} to enable
 *   path-based authorization.
 * @dataStructure All data is nested under /users/{userId}, then courses under
 *   /users/{userId}/courses/{courseId}, and finally chapters under
 *   /users/{userId}/courses/{courseId}/chapters/{chapterId}. This structure
 *   enables simple, path-based security rules.
 * @keySecurityDecisions User listing is disallowed. All write operations require
 *   a verified user identity.  Schema validation is minimized in this prototyping
 *   phase, focusing only on relational integrity and authorization fields.
 * @denormalizationForAuthorization None needed, as path-based authorization provides
 *   sufficient context for secure rules.
 * @structuralSegregation All user data is private in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profile document.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get) - Authenticated user can read their own profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @allow (delete) - Authenticated user can delete their own profile.
     * @deny (create) - Cannot create a profile with a userId that does not match the authenticated user.
     * @deny (get) - Cannot read another user's profile.
     * @deny (update) - Cannot update another user's profile.
     * @deny (delete) - Cannot delete another user's profile.
     * @deny (list) - User profiles cannot be listed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Secures course documents under a user's profile.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) - Authenticated user can create a course under their profile if the userId matches their auth.uid.
     * @allow (get) - Authenticated user can read a course under their profile.
     * @allow (update) - Authenticated user can update a course under their profile.
     * @allow (delete) - Authenticated user can delete a course under their profile.
     * @deny (create) - Cannot create a course with a userId that does not match the authenticated user.
     * @deny (get) - Cannot read a course under another user's profile.
     * @deny (update) - Cannot update a course under another user's profile.
     * @deny (delete) - Cannot delete a course under another user's profile.
     * @deny (list) - User courses can only be listed by the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/courses/{courseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow create: if isOwner(userId) && request.resource.data.userId == userId && request.resource.data.id == courseId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Secures chapter documents under a course.
     * @path /users/{userId}/courses/{courseId}/chapters/{chapterId}
     * @allow (create) - Authenticated user can create a chapter under their course if the userId matches their auth.uid.
     * @allow (get) - Authenticated user can read a chapter under their course.
     * @allow (update) - Authenticated user can update a chapter under their course.
     * @allow (delete) - Authenticated user can delete a chapter under their course.
     * @deny (create) - Cannot create a chapter with a userId that does not match the authenticated user.
     * @deny (get) - Cannot read a chapter under another user's course.
     * @deny (update) - Cannot update a chapter under another user's course.
     * @deny (delete) - Cannot delete a chapter under another user's course.
     * @deny (list) - User chapters can only be listed by the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/courses/{courseId}/chapters/{chapterId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow create: if isOwner(userId) && request.resource.data.courseId == courseId && request.resource.data.id == chapterId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }
  }
}