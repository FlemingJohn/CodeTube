/**
 * @fileoverview Firestore Security Rules for CodeTube application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where users have full
 * control over their own data (courses and chapters) stored under their
 * respective user ID.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership.
 * - /users/{userId}: User profile information.
 * - /users/{userId}/courses/{courseId}: Courses created or imported by the user.
 * - /users/{userId}/courses/{courseId}/chapters/{chapterId}: Chapters within a course.
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Users can only create, read, update, or delete courses and chapters under their own user ID.
 * - Listing courses and chapters is allowed only for the owner.
 *
 * Denormalization for Authorization:
 * The data structure itself denormalizes ownership by nesting all course and
 * chapter data under the user's document. This allows for simple, path-based
 * security rules without the need for expensive `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with matching ID can create their own profile.
     * @allow (get) - User with matching ID can read their own profile.
     * @allow (update) - User with matching ID can update their own profile.
     * @allow (delete) - User with matching ID can delete their own profile.
     * @deny (list) - Listing all user documents is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null; // Ensures document exists before delete
      allow list: if false;
    }

    /**
     * @description Controls access to course documents under a user.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) - User with matching ID can create courses under their ID.
     * @allow (get) - User with matching ID can read courses under their ID.
     * @allow (update) - User with matching ID can update courses under their ID.
     * @allow (delete) - User with matching ID can delete courses under their ID.
     * @allow (list) - User with matching ID can list courses under their ID.
     * @deny Any other user cannot access these courses.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to chapter documents under a course.
     * @path /users/{userId}/courses/{courseId}/chapters/{chapterId}
     * @allow (create) - User with matching ID can create chapters under their course.
     * @allow (get) - User with matching ID can read chapters under their course.
     * @allow (update) - User with matching ID can update chapters under their course.
     * @allow (delete) - User with matching ID can delete chapters under their course.
     * @allow (list) - User with matching ID can list chapters under their course.
     * @deny Any other user cannot access these chapters.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/courses/{courseId}/chapters/{chapterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
      allow list: if isSignedIn() && isOwner(userId);
    }
  }
}