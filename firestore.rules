rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to private courses stored under a user's profile.
     * @path /users/{userId}/courses/{courseId}
     * @allow (create) User with ID 'user123' can create a course under their profile.
     * @allow (get) User with ID 'user123' can read a course under their profile.
     * @allow (update) User with ID 'user123' can update a course under their profile.
     * @allow (delete) User with ID 'user123' can delete a course under their profile.
     * @deny (create) User with ID 'user456' cannot create a course under user123's profile.
     * @deny (get) User with ID 'user456' cannot read a course under user123's profile.
     * @principle Enforces document ownership for private courses.
     */
    match /users/{userId}/courses/{courseId} {
       function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to chapters within a private course.
     * @path /users/{userId}/courses/{courseId}/chapters/{chapterId}
     * @allow (create) User with ID 'user123' can create a chapter in their course.
     * @allow (get) User with ID 'user123' can read a chapter in their course.
     * @allow (update) User with ID 'user123' can update a chapter in their course.
     * @allow (delete) User with ID 'user123' can delete a chapter in their course.
     * @deny (create) User with ID 'user456' cannot create a chapter in user123's course.
     * @deny (get) User with ID 'user456' cannot read a chapter in user123's course.
     * @principle Enforces document ownership for chapters.
     */
    match /users/{userId}/courses/{courseId}/chapters/{chapterId} {
       function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to public courses.
     * @path /courses/{courseId}
     * @allow (get) Any user can read a published course.
     * @allow (list) Any user can list published courses.
     * @allow (create) Only the owner can create a public course with the correct userId.
     * @allow (update) Only the owner can update a public course.
     * @allow (delete) Only the owner can delete a public course.
     * @deny (create) User with ID 'user456' cannot create a public course with userId 'user123'.
     * @deny (update) User with ID 'user456' cannot update a public course owned by 'user123'.
     * @principle Allows public read access to published courses while enforcing ownership for writes.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(resource) {
        return request.auth.uid == resource.data.userId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(request.resource);
      allow update: if isSignedIn() && isOwner(resource);
      allow delete: if isSignedIn() && isOwner(resource);
    }
  }
}